unit EEG;

interface
uses Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
     StdCtrls,TeEngine,typeNrnPars,ThresholdO;

procedure FindSigmoid(var U:double) ;
function RateFromBiofizika2002(var U :double):double;
function steady_rate (var U, w,n:double):double;

implementation

uses Math,Init,mathMy,unit1, unit2{,Hodgkin,HH_canal,ph_Dens,ph_Volt,Threshold,
     Unit1,Unit4,Unit7};

var
    SigmV       {:array[0..1000] of}: double;
    dV_Sigm, VT, VL,  sigma_V,sgmd     :double;
    N_Sigm, Nerf, IfFsgmRead, IfSigmoidFound      :integer;
    exp_Int_0_u :array[0..500000] of double;
    erf                        :array[0..1000,1..2] of double;

procedure ParametersForSigmoid;
begin
  N_Sigm:=400;
  dV_Sigm:=0.040{V}/N_Sigm;
end;

function Erfic(x :double):double;
var  xb,dx    :double;
     aaa      :text;
     i        :integer;

  function ErfTail(x :double):double;
  begin
    if x>0 then  ErfTail:= 1-exp(-x*x)/x/sqrt(pi)
           else  ErfTail:=-1-exp(-x*x)/x/sqrt(pi);
  end;

begin
   //ReadTable

  if IfFsgmRead<>1 then
 begin IfFsgmRead:=1;

     assign(aaa,'erfic.dat'); reset(aaa);
     i:=-1;
     repeat i:=i+1;
       readln(aaa,erf[i,1],erf[i,2]);
     until (eof(aaa));
     close(aaa);
     Nerf:=i;
 end;
  xb:=erf[0,1]; dx:=(erf[Nerf,1]-erf[0,1])/Nerf;
  if abs(x)>2.8 then  Erfic:=ErfTail(x) else begin
     i:=trunc((x-xb)/dx);   if (xb+i*dx=x) then i:=i-1;
     Erfic:=erf[i,2]+(erf[i+1,2]-erf[i,2])/dx*(x-erf[i,1]);
  end;
end;

function IntForSteadyRate(a,b :double):double;
{ IntForSteadyRate=int_a^b exp(u^2) (1+erf(u)) du }
var S,dx,x,Arg  :double;
    i,N         :integer;
begin
  dx:=0.01;  N:=trunc((b-a)/dx)+1;  dx:=(b-a)/N;
  S:=0;
  for i:=1 to N do begin
      x:=a+(i-0.5)*dx;
      if x<-2.8 then Arg:=-1/x/sqrt(pi) else
      {*****************************}
      Arg:=dexp(x*x)*(1+Erfic(x));
      S:=S + Arg*dx;
      {*****************************}
                   end;

  IntForSteadyRate:=S;
end;

procedure FindSigmoid(var U:double);
{ Solution of eq.(5.104) from Gerstner for ISI=T:
  T=sqrt(pi)*int_[(Vreset-x)/sgm]^[(VT-x)/sgm] exp(u^2)*(1+erf(u)) du
  where tau=C/(gL+gK+gNa+gAHP+gM), U is asymptotic potential. }
var
    i,ie,k,iter                 :integer;
    q, T_old, VT_, T_, a, b, Vreset   :double;
begin
 { ParametersForSigmoid }
  sigma_V:=Form1.SpinEdit10.Value;
  VT:=Form1.Spinedit6.Value/10;
  T_:=0;
  VL:=anrn1.NP.VL*1000;
  {VL:=-Vrest;}
 {
  if Form1.CheckBox10.Checked then VT:=VThreshold3(Anrn1.NP, Anrn1.NV.DVlinDt, 0.1)*1000
  else   begin
         VT:=Form1.Spinedit6.value/10;
         Form1.LineSeries9.AddXY( t*1000, VT);
         end;
 }

  a:=(anrn1.np.Vreset*1000-U)/sigma_V/sqrt(2);
  b:=(VT+anrn1.np.Vrest*1000-U)/sigma_V/sqrt(2);
            {*************************************}
  T_:={tau*}sqrt(pi)*IntForSteadyRate(a,b);               {Sigmoid Value}
            {*************************************}
  SigmV:=1/T_;

end;




{*********************************************************************}
function RateFromBiofizika2002(var U :double):double;
{ Calculates rate as done in [Biofizika 2002]
nu=max(nu_steady,nu_unsteady),
nu_steady=f(V_) is sigmoid-like "f-V curve";
nu_unsteady=f(V_,dVdt,sigma_V) considers crossing the threshold
by Gaussian set of neuron potentials. }
var
   nu_steady, nu_unsteady, dVdt, V_ , C, tau     :double;
   i                                             :integer;
begin

FindSigmoid(U);

{C:=Form1.Spinedit12.Value/10000;

if t*1000>900 then begin
                  C:=C+0;
 end;}

//tau:=C/(ANrn1.NV.Conductance + Anrn1.Np.gL);


if Form1.CheckBox20.Checked then nu_steady:=SigmV/ANrn1.NP.tau_m else nu_steady:=0;

  {********************}
  dt:=0.0001;
   dVdt:=Anrn1.NV.DVlinDt*1000    {( U-Uo )/dt};                 {derivation}
   if dVdt<0 then dVdt:=0;
  {**************************************************}
if Form1.CheckBox21.Checked then
nu_unsteady:=1/sqrt(2*pi)/sigma_V*dVdt*
exp( -(VT+anrn1.np.Vrest*1000-U)*(VT+anrn1.np.Vrest*1000-U)/(2*sigma_V*sigma_V) )
else  nu_unsteady:=0;


  {**************************************************}
  RateFromBiofizika2002:=nu_steady + nu_unsteady;
  //Form1.Series7.AddXY( t*1000, nu_steady);
  //Form1.Series8.AddXY( t*1000, nu_unsteady);

end;

function steady_rate(var U,w,n:double):double;

var
    i,ie,k,iter                 :integer;
    q, T_old, VT_, T_, a, b, Vreset,C,tau  :double;
begin

 { ParametersForSigmoid }
  T_:=0;
  VL:=ANrn_LIF.NP.VL*1000;
  VT:=Form2.Spinedit3.value;
  sigma_V:=form2.SpinEdit6.Value;
  Vreset:=Form2.Spinedit4.value/10;
  a:=(Vreset-U)/sigma_V/sqrt(2);
  b:=(VT + ANrn_LIF.np.Vrest*1000-U)/sigma_V/sqrt(2);
  C:=Form2.Spinedit5.Value/10000;
  tau:=C/(ANrn_LIF.np.gAHP*w + ANrn_LIF.np.gKM*n*n {ANrn_LIF.NV.Conductance} + ANrn_LIF.Np.gL);
  T_:=tau*sqrt(pi)*IntForSteadyRate(a,b);   {Sigmoid Value}
            {*************************************}
  steady_rate:=1/T_;


  end;

end.
